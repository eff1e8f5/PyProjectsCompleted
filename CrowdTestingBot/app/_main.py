import logging
import threading
import time
from datetime import datetime, timedelta, timezone
from pathlib import Path

import pandas
import psycopg
from pyrogram import Client, filters, types
from pyrogram.errors import exceptions
from pyrogram.types import (
    BotCommand,
    BotCommandScopeAllPrivateChats, BotCommandScopeChat,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaAudio,
)

from variables import (
    bot_name,
    db_host,
    db_name,
    db_password,
    db_port,
    db_user,
    dir_data,
    dir_main,
    dir_tmp,
    group_id,
    tg_api_hash,
    tg_api_id,
    tg_bot_token,
)

if not Path(dir_main, dir_tmp).is_dir():
    Path(dir_main, dir_tmp).mkdir()

log_format = '%(levelname)s: %(asctime)s - %(message)s'
formatter = logging.Formatter(log_format)

logging.basicConfig(level=logging.INFO, format=log_format)

tz = timezone(timedelta(hours=3))

app = Client(
    name=bot_name,
    bot_token=tg_bot_token,
    api_hash=tg_api_hash,
    api_id=tg_api_id,
    workdir=Path(dir_main, dir_tmp),
)

try:
    conn = psycopg.connect(
        dbname=db_name,
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port,
    )

    cursor = conn.cursor()
except Exception as e:
    logging.error(e)
    exit()


@app.on_message(filters.command(commands='ban') & filters.group)
async def ban(client, message):
    logging.info(f'<<< private msg:\n{message}')

    chat_id = message.chat.id

    if chat_id != group_id:
        return

    args = message.text.split(' ')

    comment = ''

    if len(args) == 1:
        await app.send_message(
            chat_id=group_id,
            text='–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –µ–º—É –±–∞–Ω–∞ <pre>/ban ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</pre>',
        )
        return
    elif len(args) > 1:
        try:
            user_id = int(args[1])
        except ValueError:
            await app.send_message(
                chat_id=group_id,
                text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω ID <pre>/ban ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</pre>',
            )
            return

        for i in args[2:]:
            comment += f'{i} '
    else:
        ...

    try:
        query = f'''
            INSERT INTO
                banned (id, comment)
            VALUES 
                ({user_id}, \'{comment}\')
            ON CONFLICT DO NOTHING;
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=group_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.send_message(
        chat_id=group_id,
        text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
    )


@app.on_message(filters.command(commands='unban') & filters.group)
async def unban(client, message):
    logging.info(f'<<< private msg:\n{message}')

    chat_id = message.chat.id

    if chat_id != group_id:
        return

    args = message.text.split(' ')

    if len(args) == 1:
        await app.send_message(
            chat_id=group_id,
            text='–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –Ω–µ–≥–æ –±–∞–Ω–∞ <pre>/unban ID</pre>',
        )
        return
    elif len(args) > 1:
        try:
            user_id = int(message.text.split(' ')[1])
        except ValueError:
            await app.send_message(
                chat_id=group_id,
                text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω ID <pre>/unban ID</pre>',
            )
            return
    else:
        ...

    try:
        query = f'''
            SELECT * FROM
                banned
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=group_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        try:
            query = f'''
                DELETE FROM
                    banned
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=group_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.send_message(
            chat_id=group_id,
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        )
    else:
        await app.send_message(
            chat_id=group_id,
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö',
        )


@app.on_message(filters.command(commands='start') & filters.private)
async def start(client, message):
    logging.info(f'<<< private msg:\n{message}')

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    if message.from_user.username:
        username = f'@{message.from_user.username}'
    else:
        if message.from_user.first_name:
            username = message.from_user.first_name
        else:
            username = ''

    if message.from_user.first_name:
        first_name = message.from_user.first_name
    else:
        first_name = ''

    try:
        query = f'''
            SELECT * FROM
                candidates
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()

        if response:
            query = f'''
                INSERT INTO 
                    archive (
                        id, username, country, years_old, first_android_device, 
                        first_device_model, first_device_os, second_android_device, 
                        second_device_model, second_device_os, mir_card, candidate_name,
                        phone_number, referrer, candidate_status, dt_last_activity, 
                        reminder_sent, name_from_telegram, dt_application_submission
                        )
                SELECT * FROM 
                    candidates 
                WHERE 
                    id = {user_id};
            '''
            cursor.execute(query)

            query = f'''
                DELETE FROM 
                    candidates
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)

        query = f'''
            INSERT INTO
                candidates (id, username, candidate_status, name_from_telegram)
            VALUES 
                ({user_id}, \'{username}\', \'–Ω–∞—á–∞–ª\', \'{first_name}\')
            ON CONFLICT DO NOTHING;
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            SELECT * FROM
                expected_action
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()

        if response:
            query = f'''
                DELETE FROM 
                    expected_action
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)

        query = f'''
            INSERT INTO
                expected_action (id, primary_action)
            VALUES 
                ({user_id}, \'button_wait\')
            ON CONFLICT DO NOTHING;
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    btn = [
        [
            InlineKeyboardButton(
                text='üé´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ',
                callback_data='about',
            )
        ],
        [
            InlineKeyboardButton(
                text='‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
                callback_data='submit',
            ),
            InlineKeyboardButton(
                text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                callback_data='feedback',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
üññ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç <b>–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç</b> –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Crowdtesting!

–ú—ã —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∏—Ä–æ–º IT. –ó–∞ –≤—Ö–æ–¥ –ø–ª–∞—Ç–∏—Ç–µ –Ω–µ –≤—ã, –∞ –≤–∞–º! üí•

–ù–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ - –º–∞—Å—à—Ç–∞–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –í–µ–¥—É—â–µ–π —Å–∏–ª–æ–π —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –º–æ–≥–ª–∏ –±—ã —Å—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤—ã! üöÄ

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ>
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ>
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å>. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—ë –≤ –ú–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º? üòâ
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_message(filters.command(commands='report') & filters.group)
async def report(client, message):
    logging.info(message)

    chat_id = message.chat.id

    if chat_id != group_id:
        return

    file = Path(
        dir_main,
        dir_tmp,
        f'report_{datetime.strftime(datetime.now(tz=tz), "%Y%m%d%H%M%S")}.xlsx',
    )

    query = f'''
        SELECT * FROM
            candidates;
    '''
    cursor.execute(query)
    response = cursor.fetchall()

    for num_item in range(len(response)):
        response.append(list(response.pop(0)))

    for item in response:
        if item[15]:
            new_value = datetime.strftime(item[15], '%Y-%m-%d %H:%M:%S.%f %z')
            item[15] = new_value
        if item[18]:
            new_value = datetime.strftime(item[18], '%Y-%m-%d %H:%M:%S.%f %z')
            item[18] = new_value

    df_main = pandas.DataFrame(
        response,
        columns=[
            'id',
            'username',
            'country',
            'years_old',
            'first android device',
            'first device model',
            'first device os',
            'second android device',
            'second device model',
            'second device os',
            'mir card',
            'candidate name',
            'phone number',
            'referrer',
            'candidate status',
            'data/time last activity',
            'reminder sent',
            'name from telegram',
            'data/time application submission',
        ],
    )

    query = f'''
        SELECT * FROM
            archive;
    '''
    cursor.execute(query)
    response = cursor.fetchall()

    for num_item in range(len(response)):
        response.append(list(response.pop(0)))

    for item in response:
        if item[16]:
            new_value = datetime.strftime(item[16], '%Y-%m-%d %H:%M:%S.%f %z')
            item[16] = new_value
        if item[19]:
            new_value = datetime.strftime(item[19], '%Y-%m-%d %H:%M:%S.%f %z')
            item[19] = new_value

    df_archive = pandas.DataFrame(
        response,
        columns=[
            '#',
            'id',
            'username',
            'country',
            'years_old',
            'first android device',
            'first device model',
            'first device os',
            'second android device',
            'second device model',
            'second device os',
            'mir card',
            'candidate name',
            'phone number',
            'referrer',
            'candidate status',
            'data/time last activity',
            'reminder sent',
            'name from telegram',
            'data/time application submission',
        ],
    )

    query = f'''
        SELECT * FROM
            banned;
    '''
    cursor.execute(query)
    response = cursor.fetchall()

    df_banned = pandas.DataFrame(
        response,
        columns=[
            'id',
            'comment',
        ],
    )

    with pandas.ExcelWriter(file) as writer:
        df_main.to_excel(writer, sheet_name='main', index=False)
        df_archive.to_excel(writer, sheet_name='archive', index=False)
        df_banned.to_excel(writer, sheet_name='banned', index=False)

    await app.send_document(chat_id=group_id, document=file)

    try:
        file.unlink()
    except Exception as e:
        logging.error(e)


@app.on_message(filters.command(commands='help') & filters.private)
async def help_group(client, message):
    logging.info(message)

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    await app.send_message(
        chat_id=user_id,
        text='–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /feedback',
    )


@app.on_message(filters.command(commands='help') & filters.group)
async def help_group(client, message):
    logging.info(message)

    chat_id = message.chat.id

    if chat_id != group_id:
        return

    await app.send_message(
        chat_id=chat_id, text='–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /report\n–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/ban ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</code>\n–¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/unban ID</code>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ—Ç—á—ë—Ç–∞—Ö'
    )


@app.on_callback_query(filters.regex('solution'))
async def solution(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    message_id = callback_query.message.id

    if callback_query.from_user.username:
        username = f'@{callback_query.from_user.username}'
    else:
        username = callback_query.from_user.first_name

    if 'solution_accepted' in callback_query.data:
        user_id = callback_query.data.split('id=')[1]

        try:
            query = f'''
                UPDATE
                    candidates
                SET
                    candidate_status = \'–ø—Ä–∏–Ω—è—Ç\'
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        btn = [
            [
                InlineKeyboardButton(
                    text='üîÉ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                    callback_data=f'solution_repeat?id={user_id}',
                )
            ],
        ]

        await app.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=f'{callback_query.message.caption}\n\n<pre>‚úÖ –ü—Ä–∏–Ω—è—Ç.\n–ü–æ—Ä–µ—à–∞–ª: {username}\n{datetime.now(tz=tz).replace(microsecond=0)}</pre>',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
        )

        try:
            query = f'''
                SELECT * FROM
                    candidates
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            response = cursor.fetchall()

            if response[0][17]:
                candidate_name = response[0][17]
            else:
                candidate_name = response[0][1]
        except Exception as e:
            logging.error(e)
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        btn = [
            [
                InlineKeyboardButton(
                    text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                    url='https://t.me/+K4D8yyO8FaE5NmUy',
                ),
            ],
            # [
            #     InlineKeyboardButton(
            #         text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
            #         callback_data=f'feedback',
            #     ),
            # ],
        ]

        await app.send_message(
            chat_id=user_id,
            disable_web_page_preview=True,
            text=f'''
–û—Ç–ª–∏—á–Ω–æ, {candidate_name}! 

–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ https://t.me/+K4D8yyO8FaE5NmUy. –°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! –í –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é.
''',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
        )
    elif 'solution_rejected' in callback_query.data:
        user_id = callback_query.data.split('id=')[1]

        try:
            query = f'''
                UPDATE
                    candidates
                SET
                    candidate_status = \'–æ—Ç–∫–ª–æ–Ω—ë–Ω\'
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=f'{callback_query.message.caption}\n\n<pre>‚õîÔ∏è –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.\n–ü–æ—Ä–µ—à–∞–ª: {username}\n{datetime.now(tz=tz).replace(microsecond=0)}</pre>',
        )

        btn = [
            [
                InlineKeyboardButton(
                    text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                    url='https://t.me/crowdtesting_projects',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üì≤ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
                    callback_data='edit_profile',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                    callback_data='feedback',
                ),
            ],
        ]

        await app.send_message(
            chat_id=user_id,
            disable_web_page_preview=True,
            text='''
–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∫ –Ω–∞–º –æ–±—Ä–∞—â–∞–µ—Ç—Å—è. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—á–∞—Å—Ç–∏–µ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ, —Ç.–∫. –æ–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è ‚Äì –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª.
–¢–∞–∫–∂–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤ –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ (https://t.me/crowdtesting_projects) –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ‚Äì –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
            ''',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
        )
    elif 'solution_remake' in callback_query.data:
        user_id = callback_query.data.split('id=')[1]

        dt_now = datetime.now(tz=tz)

        try:
            query = f'''
                UPDATE
                    candidates
                SET
                    candidate_status = \'–≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫—É\',
                    dt_last_activity = \'{dt_now}\',
                    reminder_sent = null
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)

            query = f'''
                UPDATE
                    expected_action
                SET
                    primary_action = \'NDA\'
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=f'{callback_query.message.caption}\n\n<pre>‚ùî –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å.\n–ü–æ—Ä–µ—à–∞–ª: {username}\n{datetime.now(tz=tz).replace(microsecond=0)}</pre>',
        )

        btn = [
            [
                InlineKeyboardButton(
                    text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                    callback_data=f'feedback',
                ),
            ],
        ]

        await app.send_message(
            chat_id=user_id,
            disable_web_page_preview=True,
            text=f'''
–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã NDA. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ–ª—è:
 - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
 - –§–ò–û
 - –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 - –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
 - –ü–æ–¥–ø–∏—Å—å

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π NDA –≤ —ç—Ç–æ—Ç —á–∞—Ç (–∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ).
            ''',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
        )
    elif 'solution_repeat' in callback_query.data:
        user_id = callback_query.data.split('id=')[1]

        try:
            query = f'''
                UPDATE
                    candidates
                SET
                    candidate_status = \'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ\'
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        try:
            query = f'''
                SELECT * FROM
                    candidates
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            response = cursor.fetchall()

            if response[0][17]:
                candidate_name = response[0][17]
            else:
                candidate_name = response[0][1]
        except Exception as e:
            logging.error(e)
            await app.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=f'{callback_query.message.caption}\n\n<pre>üîÉ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n–ü–æ—Ä–µ—à–∞–ª: {username}\n{datetime.now(tz=tz).replace(microsecond=0)}</pre>',
        )

        btn = [
            [
                InlineKeyboardButton(
                    text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                    url='https://t.me/+K4D8yyO8FaE5NmUy',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                    callback_data=f'feedback',
                ),
            ],
        ]

        await app.send_message(
            chat_id=user_id,
            disable_web_page_preview=True,
            text=f'''
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {candidate_name}! 

–ü–æ—Ö–æ–∂–µ, –Ω–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ç–µ—Ä—è–ª–æ—Å—å –≤ –ø–æ—Ç–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –º—ã –∂–¥–µ–º –≤–∞—Å –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ https://t.me/+K4D8yyO8FaE5NmUy. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!
''',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
        )


@app.on_callback_query(filters.regex('feedback'))
async def feedback(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                secondary_action = \'feedback\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            disable_web_page_preview=True,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=(
            f'{callback_query.message.text}\n\n' f'<pre>‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</pre>'
        ),
    )

    await app.send_message(
        chat_id=user_id,
        disable_web_page_preview=True,
        text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å',
    )


@app.on_message(filters.command(commands='feedback') & filters.private)
async def feedback_cmd(client, message):
    logging.info(message)

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                secondary_action = \'feedback\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.send_message(
        chat_id=user_id,
        disable_web_page_preview=True,
        text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å',
    )


@app.on_callback_query(filters.regex('edit_profile'))
async def edit_profile(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=(
            f'{callback_query.message.text}\n\n'
            f'<pre>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É</pre>'
        ),
    )

    await check(user_id)


@app.on_callback_query(filters.regex('about'))
async def about(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=(
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</pre>'
        ),
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
                callback_data='submit',
            ),
            InlineKeyboardButton(
                text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                callback_data='feedback',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
üìå –ú—ã –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –º–∏—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Android-—Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Å NFC.

–ù–∞—à–∞ —Ü–µ–ª—å - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞ —Å—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Å –û–° Android.

–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? 
–≠—Ç–æ —Ç–∞–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–±–æ–¥—É –¥–µ–π—Å—Ç–≤–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞: –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª—é–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–ª–∏—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å —É—Å–ø–µ—Ö–æ–≤ –º–æ–∂–Ω–æ –¥–∞–∂–µ –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

‚öôÔ∏è <u>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç?</u>ü§î
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–Ω–µ –∑–∞–π–º—ë—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º –Ω–∞ –ø–µ—á–µ–Ω—å–∫–∏);
- –ü–æ–∏—Å–∫ –±–∞–≥–æ–≤ –∏ –∏—Ö —Ñ–∏–∫—Å–∞—Ü–∏—è.

–í –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É –æ—à–∏–±–æ–∫.

–ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ - —Ç—É—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–µ–π! –ù–∞–π–¥–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ‚ú®
–ü–æ —Å–µ–∫—Ä–µ—Ç—Éü§´: –≤ –ø—Ä–æ—à–ª—ã—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 180 –¥–µ—Ñ–µ–∫—Ç–æ–≤!

üí∞ <u>–ê —á—Ç–æ –ø–æ –æ–ø–ª–∞—Ç–µ?</u>
–ó–∞ –∫–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ - –æ–ø–ª–∞—Ç–∞ 150 —Ä—É–±–ª–µ–π. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ –¥–≤—É—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∑–∞ –∫–∞–∂–¥–æ–µ.

–ó–∞ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –±–∞–≥ —Å:
–Ω–∏–∑–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 150 —Ä—É–±–ª–µ–π;
—Å—Ä–µ–¥–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 200 —Ä—É–±–ª–µ–π;
–≤—ã—Å–æ–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 250 —Ä—É–±–ª–µ–π;

–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã, —Ç–æ —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ—Ä–æ–∂–µ: 300/400/500 —Ä—É–±–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–µ—Ñ–µ–∫—Ç–∞. 

–¢–∞–∫–∂–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –≤—Ä—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –æ—Ç—á–µ—Ç–∞, –Ω–æ –Ω–∞ —ç—Ç–æ–º –±–æ–Ω—É—Å—ã –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è. –¢–µ–º, –∫—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –≤ —Ç–æ–ø-10/50 —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ—Å–æ–±–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ 3000 —Ä—É–±–ª–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.

–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º 5 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ –Ω–∏—Ö —Å–æ—Å—Ç–∞–≤–∏—Ç 2000 —Ä—É–±–ª–µ–π.

ü§ù <u>–ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–ø–ª–∞—Ç—É?</u>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –¥—Ä—É–∑–µ–π - –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø–æ–¥–∞—Å—Ç –∑–∞—è–≤–∫—É, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç –≤–∞—Å - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 200 —Ä—É–±–ª–µ–π.
–ü—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º–æ–º—É –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è –≤ –ø–æ–ª–µ "–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?"

üì± <u>–ù–∞ –∫–∞–∫–∏—Ö –¥–µ–≤–∞–π—Å–∞—Ö –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?</u>
–ì–ª–∞–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ - –≤–∞—à —Å–º–∞—Ä—Ç—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–µ—Ä—Å–∏—é Android 7 –∏–ª–∏ –≤—ã—à–µ, –∞ —Ç–∞–∫–∂–µ –º–æ–¥—É–ª—å NFC.

üìÜ <u>–ö–æ–≥–¥–∞ —Å—Ç–∞—Ä—Ç?</u>
–í —Å–µ–Ω—Ç—è–±—Ä–µ! –¢–∞–∫ —á—Ç–æ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω—É–∂–Ω–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è, –∞ —Å –¥—Ä—É–≥–æ–π - —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å. 

‚ÄºÔ∏è –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ> –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! 

–í –ø—Ä–æ—Ü–µ—Å—Å–µ –º—ã —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω—ã (NDA). –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NDA –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑. –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ NDA –¥–∞—é—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞–º –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –¢–∞–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π.

–ë—É–¥—É—â–∏–π –ø—Ä–æ–µ–∫—Ç - –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä IT –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è! üòÉ
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_message(filters.command(commands='about') & filters.private)
async def about_cmd(client, message):
    logging.info(message)

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    btn = [
        [
            InlineKeyboardButton(
                text='‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
                callback_data='submit',
            ),
            InlineKeyboardButton(
                text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                callback_data='feedback',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
üìå –ú—ã –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –º–∏—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Android-—Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Å NFC.

–ù–∞—à–∞ —Ü–µ–ª—å - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞ —Å—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Å –û–° Android.

–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? 
–≠—Ç–æ —Ç–∞–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–±–æ–¥—É –¥–µ–π—Å—Ç–≤–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞: –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª—é–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–ª–∏—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å —É—Å–ø–µ—Ö–æ–≤ –º–æ–∂–Ω–æ –¥–∞–∂–µ –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

‚öôÔ∏è <u>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç?</u>ü§î
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–Ω–µ –∑–∞–π–º—ë—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º –Ω–∞ –ø–µ—á–µ–Ω—å–∫–∏);
- –ü–æ–∏—Å–∫ –±–∞–≥–æ–≤ –∏ –∏—Ö —Ñ–∏–∫—Å–∞—Ü–∏—è.

–í –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É –æ—à–∏–±–æ–∫.

–ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ - —Ç—É—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–µ–π! –ù–∞–π–¥–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ‚ú®
–ü–æ —Å–µ–∫—Ä–µ—Ç—Éü§´: –≤ –ø—Ä–æ—à–ª—ã—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 180 –¥–µ—Ñ–µ–∫—Ç–æ–≤!

üí∞ <u>–ê —á—Ç–æ –ø–æ –æ–ø–ª–∞—Ç–µ?</u>
–ó–∞ –∫–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ - –æ–ø–ª–∞—Ç–∞ 150 —Ä—É–±–ª–µ–π. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ –¥–≤—É—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∑–∞ –∫–∞–∂–¥–æ–µ.

–ó–∞ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –±–∞–≥ —Å:
–Ω–∏–∑–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 150 —Ä—É–±–ª–µ–π;
—Å—Ä–µ–¥–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 200 —Ä—É–±–ª–µ–π;
–≤—ã—Å–æ–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å—é ‚Äì 250 —Ä—É–±–ª–µ–π;

–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã, —Ç–æ —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ—Ä–æ–∂–µ: 300/400/500 —Ä—É–±–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–µ—Ñ–µ–∫—Ç–∞. 

–¢–∞–∫–∂–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –≤—Ä—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –æ—Ç—á–µ—Ç–∞, –Ω–æ –Ω–∞ —ç—Ç–æ–º –±–æ–Ω—É—Å—ã –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è. –¢–µ–º, –∫—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –≤ —Ç–æ–ø-10/50 —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ—Å–æ–±–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ 3000 —Ä—É–±–ª–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.

–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º 5 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ –Ω–∏—Ö —Å–æ—Å—Ç–∞–≤–∏—Ç 2000 —Ä—É–±–ª–µ–π.

ü§ù <u>–ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–ø–ª–∞—Ç—É?</u>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –¥—Ä—É–∑–µ–π - –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø–æ–¥–∞—Å—Ç –∑–∞—è–≤–∫—É, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç –≤–∞—Å - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 200 —Ä—É–±–ª–µ–π.
–ü—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º–æ–º—É –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è –≤ –ø–æ–ª–µ "–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?"

üì± <u>–ù–∞ –∫–∞–∫–∏—Ö –¥–µ–≤–∞–π—Å–∞—Ö –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?</u>
–ì–ª–∞–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ - –≤–∞—à —Å–º–∞—Ä—Ç—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–µ—Ä—Å–∏—é Android 7 –∏–ª–∏ –≤—ã—à–µ, –∞ —Ç–∞–∫–∂–µ –º–æ–¥—É–ª—å NFC.

üìÜ <u>–ö–æ–≥–¥–∞ —Å—Ç–∞—Ä—Ç?</u>
–í —Å–µ–Ω—Ç—è–±—Ä–µ! –¢–∞–∫ —á—Ç–æ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω—É–∂–Ω–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è, –∞ —Å –¥—Ä—É–≥–æ–π - —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å. 

‚ÄºÔ∏è –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ> –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! 

–í –ø—Ä–æ—Ü–µ—Å—Å–µ –º—ã —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω—ã (NDA). –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NDA –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑. –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ NDA –¥–∞—é—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞–º –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –¢–∞–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π.

–ë—É–¥—É—â–∏–π –ø—Ä–æ–µ–∫—Ç - –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä IT –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è! üòÉ
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('submit'))
async def submit(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                candidate_status = \'–≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'submit':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ</pre>'
        )
    elif callback_query.data == 're_submit':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    btn = [
        [
            InlineKeyboardButton(
                text='üá∑üá∫ –†–§',
                callback_data='years_old',
            ),
            InlineKeyboardButton(
                text='üåê –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞',
                callback_data='another_country',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='<u>–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è</u>:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('another_country'))
async def another_country(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                country = \'üåê –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞\',
                candidate_status = \'—É–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω—É –Ω–µ –†–§\',
                dt_last_activity = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=(f'{callback_query.message.text}\n\n<pre>üåê –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞</pre>'),
    )

    btn = [
        [
            # InlineKeyboardButton(
            #     text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥',
            #     callback_data='re_submit',
            # ),
            InlineKeyboardButton(
                text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url='https://t.me/crowdtesting_projects',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è! –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, –≤ –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ https://t.me/crowdtesting_projects –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('years_old'))
async def years_old(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                country = \'üá∑üá∫ –†–§\',
                candidate_status = \'–≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'years_old':
        text = f'{callback_query.message.text}\n\n<pre>üá∑üá∫ –†–§</pre>'
    elif callback_query.data == 're_years_old':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    btn = [
        [
            InlineKeyboardButton(
                text='üåò –°—Ç–∞—Ä—à–µ 18 –ª–µ—Ç',
                callback_data='first_android_device',
            ),
            InlineKeyboardButton(
                text='üåñ –ú–ª–∞–¥—à–µ 18 –ª–µ—Ç',
                callback_data='under_18',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='<u>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</u>:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('under_18'))
async def under_18(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                years_old = \'üåñ –ú–ª–∞–¥—à–µ 18 –ª–µ—Ç\',
                candidate_status = \'—É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç –º–ª–∞–¥—à–µ 18\',
                dt_last_activity = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=f'{callback_query.message.text}\n\n<pre>üåñ –ú–ª–∞–¥—à–µ 18 –ª–µ—Ç</pre>',
    )

    btn = [
        [
            # InlineKeyboardButton(
            #     text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥',
            #     callback_data='re_years_old',
            # ),
            InlineKeyboardButton(
                text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url='https://t.me/crowdtesting_projects',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='–í–∞—à —ç–Ω—Ç—É–∑–∏–∞–∑–º –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å! –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –≤ –Ω–∞—à–µ–º –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ https://t.me/crowdtesting_projects –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–∞—Ç—å –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è!',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('first_android_device'))
async def first_android_device(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                years_old = \'üåò –°—Ç–∞—Ä—à–µ 18 –ª–µ—Ç\',
                candidate_status = \'–≤—ã–±–æ—Ä –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'first_android_device':
        text = f'{callback_query.message.text}\n\n<pre>üåò –°—Ç–∞—Ä—à–µ 18 –ª–µ—Ç</pre>'
    elif callback_query.data == 're_first_android_device':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚õîÔ∏è –ù–µ—Ç',
                callback_data='first_device_no',
            ),
            InlineKeyboardButton(
                text='‚úÖ –î–∞',
                callback_data='input_first_device_model',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ Android —Å –≤–µ—Ä—Å–∏–µ–π 7+ –∏ NFC-–º–æ–¥—É–ª–µ–º. –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π?
–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É —Ä–æ–¥–Ω—ã—Ö/–¥—Ä—É–∑–µ–π/–∑–Ω–∞–∫–æ–º—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('first_device_no'))
async def first_device_no(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                first_android_device = \'‚õîÔ∏è –ù–µ—Ç\',
                candidate_status = \'—É–∫–∞–∑–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∞–Ω–¥—Ä–æ–π–¥–µ\',
                dt_last_activity = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=f'{callback_query.message.text}\n\n<pre>‚õîÔ∏è –ù–µ—Ç</pre>',
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥',
                callback_data='re_first_android_device',
            ),
            InlineKeyboardButton(
                text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url='https://t.me/crowdtesting_projects',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Android. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤ –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ https://t.me/crowdtesting_projects –≤–∞—Å –∂–¥—É—Ç –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø–µ—Ä–≤—ã–º –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã!

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤ —Ö–æ–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–Ω–æ–ø–∫—É <–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥>
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('input_first_device_model'))
async def input_first_device_model(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                first_android_device = \'‚úÖ –î–∞\',
                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'first_device_model\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'input_first_device_model':
        text = f'{callback_query.message.text}\n\n<pre>‚úÖ –î–∞</pre>'
    elif callback_query.data == 're_input_first_device_model':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    await app.send_message(
        chat_id=user_id,
        text='''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –û–° (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Huawei P Smart Z</pre>
        ''',
    )


@app.on_callback_query(filters.regex('input_second_device_model'))
async def input_second_device_model(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                second_android_device = \'‚úÖ –î–∞\',
                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'second_device_model\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'input_second_device_model':
        text = f'{callback_query.message.text}\n\n<pre>‚úÖ –î–∞</pre>'
    elif callback_query.data == 're_input_second_device_model':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    await app.send_message(
        chat_id=user_id,
        text='''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –û–° (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Huawei P Smart Z</pre>
        ''',
    )


@app.on_callback_query(filters.regex('mir'))
async def mir(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                second_android_device = \'‚õîÔ∏è –ù–µ—Ç\',
                candidate_status = \'–≤—ã–±–æ—Ä –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç—ã –ú–ò–†\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'mir':
        text = f'{callback_query.message.text}\n\n<pre>‚õîÔ∏è –ù–µ—Ç</pre>'
    elif callback_query.data == 're_mir':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    elif callback_query.data == 're_re_mir':
        try:
            query = f'''
                UPDATE
                    candidates
                SET
                    second_android_device = \'‚úÖ –î–∞\',
                    dt_last_activity = \'{dt_now}\',
                    reminder_sent = null
                WHERE
                    id = {user_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            conn.rollback()
            await app.send_message(
                chat_id=user_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚úÖ –î–∞, –µ—Å—Ç—å / –ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å',
                callback_data='name_input',
            ),
            InlineKeyboardButton(
                text='‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å',
                callback_data='no_card1',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ú–ò–†?

–ú—ã –Ω–µ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º. –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ú—ã –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –±—É–¥–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã —Å–∞–º–∏.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ú–ò–† –≤ –ª—é–±–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç - –∏ –∑–∞–∫—Ä—ã—Ç—å –µ—ë —Å—Ä–∞–∑—É –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('no_card1'))
async def no_card1(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                mir_card = \'‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å\',
                candidate_status = \'—É–∫–∞–∑–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç—ã –ú–ò–†\',
                dt_last_activity = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=f'{callback_query.message.text}\n\n<pre>‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å</pre>',
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥',
                callback_data='re_mir',
            ),
            InlineKeyboardButton(
                text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url='https://t.me/crowdtesting_projects',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
–ú—ã –±—ã–ª–∏ –±—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –≤–∞–º–∏, –Ω–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ –ú–ò–†. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ https://t.me/crowdtesting_projects —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –∏–º–µ—é—Ç—Å—è –∏–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–∏—é. –ú—ã –≤–∞—Å –∂–¥–µ–º, –≤–∞—à –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã –¥–ª—è –Ω–∞—Å.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤ —Ö–æ–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥> 
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('no_card2'))
async def no_card2(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                mir_card = \'‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å\',
                candidate_status = \'—É–∫–∞–∑–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç—ã –ú–ò–†\',
                dt_last_activity = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=f'{callback_query.message.text}\n\n<pre>‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å</pre>',
    )

    btn = [
        [
            InlineKeyboardButton(
                text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥',
                callback_data='re_re_mir',
            ),
            InlineKeyboardButton(
                text='üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url='https://t.me/crowdtesting_projects',
            ),
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text='''
–ú—ã –±—ã–ª–∏ –±—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –≤–∞–º–∏, –Ω–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ –ú–ò–†. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–±—â–µ–º –∫–∞–Ω–∞–ª–µ https://t.me/crowdtesting_projects —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –∏–º–µ—é—Ç—Å—è –∏–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–∏—é. –ú—ã –≤–∞—Å –∂–¥–µ–º, –≤–∞—à –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã –¥–ª—è –Ω–∞—Å.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤ —Ö–æ–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥> 
        ''',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('name_input'))
async def name_input(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    dt_now = datetime.now(tz=tz)

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                mir_card = \'‚úÖ –î–∞, –µ—Å—Ç—å / –ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å\',
                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'candidate_name\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'name_input':
        text = f'{callback_query.message.text}\n\n<pre>‚úÖ –î–∞, –µ—Å—Ç—å / –ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å</pre>'
    elif callback_query.data == 're_name_input':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥</pre>'
        )
    else:
        text = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    await app.send_message(
        chat_id=user_id,
        text='''
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –§–ò–û
<pre>–ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á¬ª</pre>
        ''',
    )


@app.on_message(filters.photo & filters.private)
async def resend_photo(client, message):
    logging.info(f'<<< private document:\n{message}')

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            SELECT * FROM
                expected_action
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        if response[0][2]:
            if response[0][2] == 'feedback':
                try:
                    query = f'''
                        UPDATE
                            expected_action
                        SET
                            secondary_action = null
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                btn = [
                    [
                        InlineKeyboardButton(
                            text='‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                            callback_data=f'reply?id={user_id}',
                        )
                    ],
                ]

                if message.from_user.username:
                    username = f'@{message.from_user.username}'
                else:
                    username = ''

                if message.from_user.first_name:
                    first_name = message.from_user.first_name
                else:
                    first_name = ''

                if message.caption:
                    caption = message.caption
                else:
                    caption = ''

                if username and first_name:
                    text = f'{first_name} ({username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                elif first_name:
                    text = f'{first_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                elif username:
                    text = f'{username} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                else:
                    text = f'anonymous (id: {user_id}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'

                if message.photo:
                    file_id = message.photo.file_id
                else:
                    file_id = message.document.file_id

                await app.send_cached_media(
                    chat_id=group_id,
                    file_id=file_id,
                    caption=f'{datetime.now(tz=tz).replace(microsecond=0)}\n{text}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                )

                await app.send_message(
                    chat_id=user_id,
                    disable_web_page_preview=True,
                    text=f'–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç.',
                )
        elif response[0][1]:
            if response[0][1] == 'NDA':
                dt_now = datetime.now(tz=tz)

                try:
                    query = f'''
                        UPDATE
                            candidates
                        SET
                            candidate_status = \'–æ—Ç–ø—Ä–∞–≤–∏–ª NDA\',
                            dt_last_activity = null,
                            dt_application_submission = \'{dt_now}\'
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                try:
                    query = f'''
                        UPDATE
                            expected_action
                        SET
                            primary_action = null
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                await app.send_message(
                    chat_id=user_id,
                    text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –∞–Ω–∫–µ—Ç—É. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                )

                query = f'''
                    SELECT * FROM
                        candidates
                    WHERE
                        id = {user_id};
                '''
                cursor.execute(query)
                response = cursor.fetchall()

                text = (
                    f'–¥–∞—Ç–∞: {datetime.now(tz=tz).replace(microsecond=0)}\n\n'
                    f'username: {response[0][1]}\n'
                    f'–§–ò–û: {response[0][11]}\n'
                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {response[0][12]}\n'
                    f'–ò—Å—Ç–æ—á–Ω–∏–∫: {response[0][13]}\n'
                )

                if response[0][7] == '‚õîÔ∏è –ù–µ—Ç':
                    text += (
                        f'–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][5]}\n'
                        f'–û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][6]}\n'
                    )
                else:
                    text += (
                        f'–ú–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][5]}\n'
                        f'–û–° –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][6]}\n'
                        f'–ú–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][8]}\n'
                        f'–û–° –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][9]}\n'
                    )

                btn = [
                    [
                        InlineKeyboardButton(
                            text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                            callback_data=f'solution_accepted?id={user_id}',
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text='‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                            callback_data=f'solution_rejected?id={user_id}',
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text='‚ùî –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É',
                            callback_data=f'solution_remake?id={user_id}',
                        )
                    ],
                ]

                if message.photo:
                    file_id = message.photo.file_id
                else:
                    file_id = message.document.file_id

                await app.send_cached_media(
                    chat_id=group_id,
                    file_id=file_id,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                )


@app.on_message(filters.document & filters.private)
async def resend_document(client, message):
    logging.info(f'<<< private document:\n{message}')

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            SELECT * FROM
                expected_action
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        if response[0][2]:
            if response[0][2] == 'feedback':
                try:
                    query = f'''
                        UPDATE
                            expected_action
                        SET
                            secondary_action = null
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                btn = [
                    [
                        InlineKeyboardButton(
                            text='‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                            callback_data=f'reply?id={user_id}',
                        )
                    ],
                ]

                if message.from_user.username:
                    username = f'@{message.from_user.username}'
                else:
                    username = ''

                if message.from_user.first_name:
                    first_name = message.from_user.first_name
                else:
                    first_name = ''

                if message.caption:
                    caption = message.caption
                else:
                    caption = ''

                if username and first_name:
                    text = f'{first_name} ({username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                elif first_name:
                    text = f'{first_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                elif username:
                    text = f'{username} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'
                else:
                    text = f'anonymous (id: {user_id}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{caption}'

                if message.photo:
                    file_id = message.photo.file_id
                else:
                    file_id = message.document.file_id

                await app.send_cached_media(
                    chat_id=group_id,
                    file_id=file_id,
                    caption=f'{datetime.now(tz=tz).replace(microsecond=0)}\n{text}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                )

                await app.send_message(
                    chat_id=user_id,
                    disable_web_page_preview=True,
                    text=f'–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç.',
                )
        elif response[0][1]:
            if response[0][1] == 'NDA':
                dt_now = datetime.now(tz=tz)

                try:
                    query = f'''
                        UPDATE
                            candidates
                        SET
                            candidate_status = \'–æ—Ç–ø—Ä–∞–≤–∏–ª NDA\',
                            dt_last_activity = null,
                            dt_application_submission = \'{dt_now}\'
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                try:
                    query = f'''
                        UPDATE
                            expected_action
                        SET
                            primary_action = null
                        WHERE
                            id = {user_id};
                    '''
                    cursor.execute(query)
                    conn.commit()
                except Exception as e:
                    logging.error(e)
                    conn.rollback()
                    await app.send_message(
                        chat_id=user_id,
                        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                    )
                    return

                await app.send_message(
                    chat_id=user_id,
                    text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –∞–Ω–∫–µ—Ç—É. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                )

                query = f'''
                    SELECT * FROM
                        candidates
                    WHERE
                        id = {user_id};
                '''
                cursor.execute(query)
                response = cursor.fetchall()

                text = (
                    f'–¥–∞—Ç–∞: {datetime.now(tz=tz).replace(microsecond=0)}\n\n'
                    f'username: {response[0][1]}\n'
                    f'–§–ò–û: {response[0][11]}\n'
                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {response[0][12]}\n'
                    f'–ò—Å—Ç–æ—á–Ω–∏–∫: {response[0][13]}\n'
                )

                if response[0][7] == '‚õîÔ∏è –ù–µ—Ç':
                    text += (
                        f'–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][5]}\n'
                        f'–û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][6]}\n'
                    )
                else:
                    text += (
                        f'–ú–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][5]}\n'
                        f'–û–° –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][6]}\n'
                        f'–ú–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][8]}\n'
                        f'–û–° –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {response[0][9]}\n'
                    )

                btn = [
                    [
                        InlineKeyboardButton(
                            text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                            callback_data=f'solution_accepted?id={user_id}',
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text='‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                            callback_data=f'solution_rejected?id={user_id}',
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text='‚ùî –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É',
                            callback_data=f'solution_remake?id={user_id}',
                        )
                    ],
                ]

                if message.photo:
                    file_id = message.photo.file_id
                else:
                    file_id = message.document.file_id

                await app.send_cached_media(
                    chat_id=group_id,
                    file_id=file_id,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                )


@app.on_message(filters.text & filters.private)
async def private_message_handler(client, message):
    logging.info(f'<<< private msg:\n{message}')

    user_id = message.from_user.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    if len(message.text) > 255:
        ...
    else:
        query = f'''
            SELECT * FROM
                expected_action
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()

        if response:
            if response[0][2]:
                if response[0][2] == 'feedback':
                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                secondary_action = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    btn = [
                        [
                            InlineKeyboardButton(
                                text='‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                                callback_data=f'reply?id={user_id}',
                            )
                        ],
                    ]

                    if message.from_user.username:
                        username = f'@{message.from_user.username}'
                    else:
                        username = ''

                    if message.from_user.first_name:
                        first_name = message.from_user.first_name
                    else:
                        first_name = ''

                    if username and first_name:
                        text = f'{first_name} ({username}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{message.text}'
                    elif first_name:
                        text = f'{first_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{message.text}'
                    elif username:
                        text = f'{username} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{message.text}'
                    else:
                        text = f'anonymous (id: {user_id}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{message.text}'

                    await app.send_message(
                        chat_id=group_id,
                        text=f'{datetime.now(tz=tz).replace(microsecond=0)}\n{text}',
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                    )

                    await app.send_message(
                        chat_id=user_id,
                        disable_web_page_preview=True,
                        text=f'–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç.',
                    )
            elif response[0][1]:
                dt_now = datetime.now(tz=tz)

                if response[0][1] == 'first_device_model':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                first_device_model = \'{message.text}\',
                                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –û–° –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'first_device_os\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    await app.send_message(
                        chat_id=user_id,
                        text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –û–° –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Android 11</pre>',
                    )

                    # btn = [
                    #     [
                    #         InlineKeyboardButton(
                    #             text='‚õîÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å',
                    #             callback_data='re_first_device_model',
                    #         ),
                    #         InlineKeyboardButton(
                    #             text='‚úÖ –í–µ—Ä–Ω–æ',
                    #             callback_data='first_device_os',
                    #         ),
                    #     ],
                    # ]

                    # await app.send_message(
                    #     chat_id=user_id,
                    #     text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n{message.text}',
                    #     reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                    # )
                elif response[0][1] == 'first_device_os':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                first_device_os = \'{message.text}\',
                                candidate_status = \'–≤—ã–±–æ—Ä –Ω–∞–ª–∏—á–∏—è –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'button_wait\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    btn = [
                        [
                            InlineKeyboardButton(
                                text='‚õîÔ∏è –ù–µ—Ç',
                                callback_data='mir',
                            ),
                            InlineKeyboardButton(
                                text='‚úÖ –î–∞',
                                callback_data='input_second_device_model',
                            ),
                        ],
                    ]

                    await app.send_message(
                        chat_id=user_id,
                        text='''
–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤—Ç–æ—Ä–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ Android —Å –≤–µ—Ä—Å–∏–µ–π 7+ –∏ NFC-–º–æ–¥—É–ª–µ–º, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? 

–ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è —Ç–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞ –Ω—ë–º. –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞ –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤).
                        ''',
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                    )
                elif response[0][1] == 'second_device_model':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                second_device_model = \'{message.text}\',
                                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'second_device_os\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    await app.send_message(
                        chat_id=user_id,
                        text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –û–° –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Android 11</pre>',
                    )
                elif response[0][1] == 'second_device_os':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                second_device_os = \'{message.text}\',
                                candidate_status = \'–≤—ã–±–æ—Ä –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç—ã –ú–ò–†\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'button_wait\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    btn = [
                        [
                            InlineKeyboardButton(
                                text='‚úÖ –î–∞, –µ—Å—Ç—å / –ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å',
                                callback_data='name_input',
                            ),
                            InlineKeyboardButton(
                                text='‚õîÔ∏è –ù–µ—Ç / –ù–µ –≥–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è—Ç—å',
                                callback_data='no_card2',
                            ),
                        ],
                    ]

                    await app.send_message(
                        chat_id=user_id,
                        text='''
–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ú–ò–†?

–ú—ã –Ω–µ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º. –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ú—ã –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –±—É–¥–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã —Å–∞–º–∏.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ú–ò–† –≤ –ª—é–±–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç - –∏ –∑–∞–∫—Ä—ã—Ç—å –µ—ë —Å—Ä–∞–∑—É –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
                        ''',
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
                    )
                elif response[0][1] == 'candidate_name':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                candidate_name = \'{message.text}\',
                                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'phone_number\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    await app.send_message(
                        chat_id=user_id,
                        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n<pre>–ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö</pre>',
                    )
                elif response[0][1] == 'phone_number':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                phone_number = \'{message.text}\',
                                candidate_status = \'—É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = \'referrer\'
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    await app.send_message(
                        chat_id=user_id,
                        text='''
–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?

–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–µ–∫—Ç–µ. 
 - –û—Ç —á–µ–ª–æ–≤–µ–∫–∞? –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –§–ò–û. 
 - –ò–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ telegram-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/—Ä–µ—Å—É—Ä—Å–∞. 
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ.
                        ''',
                    )
                elif response[0][1] == 'referrer':
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                referrer = \'{message.text}\',
                                candidate_status = \'–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫–Ω–∫–µ—Ç—É\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return
                    await check(user_id)
                elif response[0][1] == 'NDA':
                    await app.send_message(
                        chat_id=user_id,
                        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ NDA –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ - pdf, —Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç.',
                    )
                elif 'change_' in response[0][1]:
                    target = response[0][1].replace('change_', '')

                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                {target} = \'{message.text}\',
                                candidate_status = \'—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É\',
                                dt_last_activity = \'{dt_now}\',
                                reminder_sent = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return

                    try:
                        query = f'''
                            UPDATE
                                expected_action
                            SET
                                primary_action = null
                            WHERE
                                id = {user_id};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        await app.send_message(
                            chat_id=user_id,
                            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
                        )
                        return
                    await check(user_id)
                elif response[0][1] == 'button_wait':
                    await app.send_message(
                        chat_id=user_id,
                        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤—ã—à–µ.\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /feedback',
                    )
        else:
            ...


@app.on_callback_query(filters.regex('done'))
async def done(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                candidates
            SET
                candidate_status = \'–∑–∞–∫–æ–Ω—á–∏–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'NDA\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=f'{callback_query.message.text}\n\n<pre>‚úÖ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ</pre>',
    )

    await app.send_document(
        chat_id=user_id,
        document=Path(
            dir_main,
            dir_data,
            'NDA_(soglasheniye_o_nerazglashenii).docx',
        ),
        caption='''
<b>–í–∞–∂–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è NDA (–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)</b>

–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NDA –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑.

–¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ NDA –¥–∞—é—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞–º <u>–∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</u>, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –¢–∞–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π.

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ - pdf, —Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç.

–°–ø–µ—à–∏–º —Ä–∞–∑–≤–µ—è—Ç—å –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è: –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –Ω–∏–∫–∞–∫, –∫—Ä–æ–º–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç. 

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å - https://drive.google.com/file/d/1G8YMJle8pgYLniirf_2fFflcsDaOMpf0
        ''',
    )


@app.on_callback_query(filters.regex('change_'))
async def change_data(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        query = f'''
                SELECT * FROM
                    banned
                WHERE
                    id = {user_id};
            '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'{callback_query.data}\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if callback_query.data == 'change_candidate_name':
        text = f'{callback_query.message.text}\n\n<pre>–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û</pre>'
        text_msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –§–ò–û\n<pre>–ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á¬ª</pre>'
    elif callback_query.data == 'change_phone_number':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</pre>'
        )
        text_msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n<pre>–ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö</pre>'
    elif callback_query.data == 'change_referrer':
        text = (
            f'{callback_query.message.text}\n\n' f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫</pre>'
        )
        text_msg = '''–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?

–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–µ–∫—Ç–µ. 
 - –û—Ç —á–µ–ª–æ–≤–µ–∫–∞? –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –§–ò–û. 
 - –ò–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ telegram-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/—Ä–µ—Å—É—Ä—Å–∞. 
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ.
        '''
    elif callback_query.data == 'change_first_device_model':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</pre>'
        )
        text_msg = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –û–° (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Huawei P Smart Z</pre>'
    elif callback_query.data == 'change_first_device_os':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</pre>'
        )
        text_msg = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –û–° –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–∞\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Android 11</pre>'
    elif callback_query.data == 'change_second_device_model':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</pre>'
        )
        text_msg = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –û–° (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Huawei P Smart Z</pre>'
    elif callback_query.data == 'change_second_device_os':
        text = (
            f'{callback_query.message.text}\n\n'
            f'<pre>–ò–∑–º–µ–Ω–∏—Ç—å –û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</pre>'
        )
        text_msg = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –û–° –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n<pre>–ù–∞–ø—Ä–∏–º–µ—Ä: Android 11</pre>'
    else:
        text = ''
        text_msg = ''

    await app.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text=text,
    )

    await app.send_message(
        chat_id=user_id,
        text=text_msg,
    )


async def check(user_id):
    dt_now = datetime.now(tz=tz)

    try:
        query = f'''
            UPDATE
                candidates
            SET
                candidate_status = \'—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É\',
                dt_last_activity = \'{dt_now}\',
                reminder_sent = null
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    try:
        query = f'''
            UPDATE
                expected_action
            SET
                primary_action = \'button_wait\'
            WHERE
                id = {user_id};
        '''
        cursor.execute(query)
        conn.commit()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=user_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    query = f'''
        SELECT * FROM
            candidates
        WHERE
            id = {user_id};
    '''
    cursor.execute(query)
    response = cursor.fetchall()

    text = (
        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n'
        f'–§–ò–û: <i>{response[0][11]}</i>\n'
        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{response[0][12]}</i>\n'
        f'–ò—Å—Ç–æ—á–Ω–∏–∫: <i>{response[0][13]}</i>\n'
    )

    btn = [
        [
            InlineKeyboardButton(
                text='–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û',
                callback_data='change_candidate_name',
            )
        ],
        [
            InlineKeyboardButton(
                text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                callback_data='change_phone_number',
            ),
        ],
        [
            InlineKeyboardButton(
                text='–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫',
                callback_data='change_referrer',
            ),
        ],
    ]

    if response[0][7] == '‚õîÔ∏è –ù–µ—Ç':
        text += (
            f'–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][5]}</i>\n'
            f'–û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][6]}</i>\n'
        )
        btn += [
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_first_device_model',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –û–° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_first_device_os',
                ),
            ],
        ]
    else:
        text += (
            f'–ú–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][5]}</i>\n'
            f'–û–° –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][6]}</i>\n'
            f'–ú–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][8]}</i>\n'
            f'–û–° –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{response[0][9]}</i>\n'
        )
        btn += [
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_first_device_model',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –û–° –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_first_device_os',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_second_device_model',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='–ò–∑–º–µ–Ω–∏—Ç—å –û–° –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    callback_data='change_second_device_os',
                ),
            ],
        ]

    btn += [
        [
            InlineKeyboardButton(
                text='‚úÖ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
                callback_data='done',
            )
        ],
    ]

    await app.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=btn),
    )


@app.on_callback_query(filters.regex('reply'))
async def answer(client, callback_query):
    logging.info(callback_query)

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    manager_id = callback_query.from_user.id

    candidate_id = callback_query.data.split('id=')[1]

    message_id = callback_query.message.id

    if callback_query.from_user.username:
        username = f'@{callback_query.from_user.username}'
    else:
        username = callback_query.from_user.first_name

    query = f'''
        SELECT * FROM
            managers
        WHERE
            manager_id = {manager_id};
    '''
    cursor.execute(query)
    response = cursor.fetchall()

    if response:
        await app.send_message(
            chat_id=group_id, text=f'{username}, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –µ—â—ë –Ω–µ —Ä–µ—à—ë–Ω'
        )
    else:
        try:
            query = f'''
                INSERT INTO
                    managers (manager_id, candidate_id)
                VALUES
                    ({manager_id}, {candidate_id})
                ON CONFLICT DO NOTHING;
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=group_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=(
                f'{callback_query.message.text}\n\n'
                f'{datetime.now(tz=tz).replace(microsecond=0)}\n'
                f'–û—Ç–≤–µ—á–∞–µ—Ç {username}'
            ),
        )

        await app.send_message(
            chat_id=group_id, text=f'{username}, –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:'
        )


@app.on_message(filters.text & filters.group)
async def private_message_handler(client, message):
    logging.info(f'<<< group msg:\n{message}')

    manager_id = message.from_user.id

    chat_id = message.chat.id

    message_id = message.id

    if chat_id != group_id:
        return

    try:
        query = f'''
            SELECT * FROM
                managers
            WHERE
                manager_id = {manager_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=group_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        try:
            query = f'''
                DELETE FROM 
                    managers
                WHERE
                    manager_id = {manager_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=group_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        await app.send_message(
            chat_id=chat_id,
            reply_to_message_id=message_id,
            text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        )

        await app.send_message(
            chat_id=response[0][1],
            text=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}',
        )
    else:
        ...


@app.on_message(filters.document & filters.group)
async def resend_photo(client, message):
    logging.info(f'<<< group document:\n{message}')

    manager_id = message.from_user.id

    chat_id = message.chat.id

    message_id = message.id

    if chat_id != group_id:
        return

    try:
        query = f'''
            SELECT * FROM
                managers
            WHERE
                manager_id = {manager_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=group_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        try:
            query = f'''
                DELETE FROM 
                    managers
                WHERE
                    manager_id = {manager_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=group_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        if message.photo:
            file_id = message.photo.file_id
        else:
            file_id = message.document.file_id

        if message.caption:
            caption = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.caption}'
        else:
            caption = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å'

        await app.send_cached_media(
            chat_id=response[0][1],
            file_id=file_id,
            caption=caption,
        )

        await app.send_message(
            chat_id=chat_id,
            reply_to_message_id=message_id,
            text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        )
    else:
        ...


@app.on_message(filters.photo & filters.group)
async def resend_photo(client, message):
    logging.info(f'<<< group photo:\n{message}')

    manager_id = message.from_user.id

    chat_id = message.chat.id

    message_id = message.id

    if chat_id != group_id:
        return

    try:
        query = f'''
            SELECT * FROM
                managers
            WHERE
                manager_id = {manager_id};
        '''
        cursor.execute(query)
        response = cursor.fetchall()
    except Exception as e:
        logging.error(e)
        conn.rollback()
        await app.send_message(
            chat_id=group_id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
        )
        return

    if response:
        try:
            query = f'''
                DELETE FROM 
                    managers
                WHERE
                    manager_id = {manager_id};
            '''
            cursor.execute(query)
            conn.commit()
        except Exception as e:
            logging.error(e)
            conn.rollback()
            await app.send_message(
                chat_id=group_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ',
            )
            return

        if message.photo:
            file_id = message.photo.file_id
        else:
            file_id = message.document.file_id

        if message.caption:
            caption = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.caption}'
        else:
            caption = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å'

        await app.send_cached_media(
            chat_id=response[0][1],
            file_id=file_id,
            caption=caption,
        )

        await app.send_message(
            chat_id=chat_id,
            reply_to_message_id=message_id,
            text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        )
    else:
        ...


@app.on_message(filters.channel)
async def private_message_handler(client, message):
    logging.info(f'<<< channel msg:\n{message}')


@app.on_callback_query()
async def solution(client, callback_query):
    logging.info(f'<<< not registred callback_query:\n{callback_query}')

    callback_query_id = callback_query.id

    try:
        await app.answer_callback_query(callback_query_id=callback_query_id)
    except exceptions.bad_request_400.QueryIdInvalid:
        ...

    chat_id = callback_query.message.chat.id

    user_id = callback_query.from_user.id

    message_id = callback_query.message.id

    try:
        await app.delete_messages(chat_id=chat_id, message_ids=message_id)

        await app.send_message(chat_id=chat_id, text='Oops!')
    except Exception as e:
        logging.error(e)


@app.on_message()
async def start(client, message):
    logging.info(f'<<< other msg:\n{message}')


def add_bot_menu():
    time.sleep(5)
    app.set_bot_commands(
        commands=[
            BotCommand(command='start', description='–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'),
            BotCommand(command='about', description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ'),
            BotCommand(command='feedback', description='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
            BotCommand(command='help', description='–ü–æ–º–æ—â—å'),
        ],
        scope=BotCommandScopeAllPrivateChats(),
    )
    app.set_bot_commands(
        commands=[
            BotCommand(command='report', description='–û—Ç—á—ë—Ç'),
            BotCommand(command='help', description='–ü–æ–º–æ—â—å'),
        ],
        scope=BotCommandScopeChat(chat_id=group_id),
    )
    logging.info('menu updated')


def reminder():
    time.sleep(5)

    while True:
        dt_now = datetime.now(tz=tz)

        try:
            query = f'''
                SELECT * FROM
                    candidates
                WHERE
                    dt_last_activity is not null
                AND
                    reminder_sent is not true;
            '''
            cursor.execute(query)
            response = cursor.fetchall()
        except Exception as e:
            logging.error(e)
            break

        if response:
            for item in response:
                if item[15] + timedelta(days=1) < dt_now:
                    try:
                        query = f'''
                            UPDATE
                                candidates
                            SET
                                candidate_status = \'–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è\',
                                reminder_sent = true
                            WHERE
                                id = {item[0]};
                        '''
                        cursor.execute(query)
                        conn.commit()
                    except Exception as e:
                        logging.error(e)
                        conn.rollback()
                        app.send_message(
                            chat_id=group_id,
                            text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {item[1]}\n\n–û—à–∏–±–∫–∞: {e}',
                        )
                        break

                    btn = [
                        [
                            InlineKeyboardButton(
                                text='‚ùî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                                callback_data='feedback',
                            ),
                        ],
                    ]

                    try:
                        app.send_message(
                            chat_id=item[0],
                            text=f'''
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {item[17]}!
–ó–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ. –ë—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –Ω–∞–π–¥–µ—Ç–µ –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏ - –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ!
                            ''',
                            reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=btn
                            ),
                        )
                    except Exception as e:
                        logging.error(e)
                        app.send_message(
                            chat_id=group_id,
                            text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {item[1]}\n\n–û—à–∏–±–∫–∞: {e}',
                        )

        time.sleep(300)


if __name__ == '__main__':
    threading.Thread(target=add_bot_menu, daemon=True).start()
    threading.Thread(target=reminder, daemon=True).start()

    try:
        app.run()
    except Exception as e:
        logging.error(e)
        exit()
